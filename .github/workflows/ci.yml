name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  lint:
    name: lintrunner
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python_version: ["3.9", "3.10", "3.11"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
          lintrunner init
      - name: Run lintrunner on all files - Linux
        if: matrix.os != 'windows-latest'
        run: |
          set +e
          if ! lintrunner --force-color --all-files --tee-json=lint.json; then
              echo ""
              echo -e "\e[1m\e[36mYou can reproduce these results locally by using \`lintrunner\`.\e[0m"
              exit 1
          fi
      - name: Run lintrunner on all files - Windows
        if: matrix.os == 'windows-latest'
        run: lintrunner --force-color --all-files --tee-json=lint.json --skip NEWLINE,NOQA,TABS,SPACES
      - name: Store annotations
        if: always() && github.event_name == 'pull_request' && matrix.os != 'windows-latest'
        continue-on-error: true
        run: |
          # Use jq to massage the JSON lint output into GitHub Actions workflow commands.
          jq --raw-output \
            '"::\(if .severity == "advice" or .severity == "disabled" then "warning" else .severity end) file=\(.path),line=\(.line),col=\(.char),title=\(.code) \(.name)::" + (.description | gsub("\\n"; "%0A"))' \
            lint.json
      - name: Produce SARIF
        if: always()
        run: |
          python -m lintrunner_adapters to-sarif lint.json lintrunner.sarif
      - name: Upload SARIF file
        if: always() && matrix.os == 'ubuntu-latest'
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: lintrunner.sarif
          category: lintrunner
          checkout_path: ${{ github.workspace }}
  test:
    name: pytest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python_version: ["3.8", "3.9", "3.10", "3.11"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.create false
          poetry install
          lintrunner init
      - name: Run pytest
        run: |
          pytest --doctest-modules lintrunner_adapters
        env:
          PY_IGNORE_IMPORTMISMATCH: 1
      - name: Build package with poetry
        run: |
          poetry build
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          name: dist
          path: dist
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [lint, test]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
